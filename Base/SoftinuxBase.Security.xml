<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SoftinuxBase.Security</name>
    </assembly>
    <members>
        <member name="M:SoftinuxBase.Security.ClaimsManager.AddClaims(SoftinuxBase.Security.Data.Entities.User,System.Security.Claims.ClaimsIdentity)">
            <summary>
            Adds custom claims to WIF-managed ClaimsIdentity object, from application user object.
            </summary>
            <param name="user_"></param>
            <param name="identity_"></param>
        </member>
        <member name="M:SoftinuxBase.Security.ClaimsManager.GetAllPermissionClaims(System.String)">
            <summary>
            Reads all scoped permissions from database and create a custom "permission" claim for every scope, if any permission found for this scope.
            </summary>
            <param name="userId_"></param>
            <returns></returns>
        </member>
        <member name="T:SoftinuxBase.Security.ClaimsPrincipalFactory">
            <inheritdoc />
            <summary>
            Overriding WIF's UserClaimsPrincipalFactory allows to add custom claims to the WIF's current user.
            </summary>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.AccountController.#ctor(ExtCore.Data.Abstractions.IStorage,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Identity.UserManager{SoftinuxBase.Security.Data.Entities.User},Microsoft.AspNetCore.Identity.SignInManager{SoftinuxBase.Security.Data.Entities.User})">
            <summary>
            Initializes a new instance of the <see cref="T:SoftinuxBase.Security.Controllers.AccountController"/> class.
            </summary>
            <param name="storage_">Storage interface provided by services container.</param>
            <param name="loggerFactory_">Logger factory interface provided by services container.</param>
            <param name="userManager_">identity framework user manager instance.</param>
            <param name="signInManager_">identity framework signin manager instance.</param>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.AccountController.SignUp">
            <summary>
            Access to the register page (GET, anonymous access).
            </summary>
            <returns>SignUp view.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.AccountController.SignUp(SoftinuxBase.Security.ViewModels.Account.SignUpViewModel)">
            <summary>
            SignUp (register) action request (POST to /Account/SignUp).
            </summary>
            <param name="signUp_">signUp model from view.</param>
            <returns>Index view (signup was ok) or SignUp view (signup failed).</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.AccountController.SignIn">
            <summary>
            Access to the login page (GET, anonymous access).
            </summary>
            <returns>SignIn view.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.AccountController.SignIn(SoftinuxBase.Security.ViewModels.Account.SignInViewModel)">
            <summary>
            Sign in (login) action request.
            </summary>
            <param name="signIn_">signIp model from view.</param>
            <returns>Index view (signin was ok) or SignIn view (signin failed).</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.AccountController.SignOut">
            <summary>
            SignOut action request.
            </summary>
            <returns>SignIn (login) view.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.AccountController.AccessDenied">
            <summary>
            Display the access denied page.
            </summary>
            <returns>AccessDenied view.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.AccountController.CreateUser">
            <summary>
            Create user action request.
            </summary>
            <returns>view for creating new user.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.AccountController.UpdateProfile(System.String)">
            <summary>
            Update user profile action request.
            </summary>
            <param name="userId_">user Id value.</param>
            <returns>User view.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.AccountController.CheckUserNameExist(System.String)">
            <summary>
            Return true when user name isn't in use.
            </summary>
            <param name="userName_">user name value.</param>
            <returns>True/false as JSON.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.AdministrationController.#ctor(ExtCore.Data.Abstractions.IStorage,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SoftinuxBase.Security.Controllers.AdministrationController"/> class.
            </summary>
            <param name="storage_">application storage instance.</param>
            <param name="loggerFactory_">application logger factory instance.</param>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.AdministrationController.Index">
            <summary>
            Administration Index view.
            </summary>
            <returns>administration Index view.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.GrantPermissionsController.GetRoleForEdition(System.String)">
            <summary>
            Return role for edition: role information and associated extensions list.
            </summary>
            <param name="roleId_"></param>
            <returns>Http code and JSON role object.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.GrantPermissionsController.SaveNewRoleAndItsPermissions(SoftinuxBase.Security.ViewModels.Permissions.SaveNewRoleAndGrantsViewModel)">
            <summary>
            Create a role. Then create a set of records indicating to which extensions with which permission this role is linked to.
            </summary>
            <param name="model_"></param>
            <returns>Http status code.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.GrantPermissionsController.UpdateRolePermission(System.String,System.String,System.String)">
            <summary>
            Update a record indicating with which permission this role is linked to an extension.
            </summary>
            <param name="roleName_">Role name.</param>
            <param name="permissionValue_">New permission level to save.</param>
            <param name="extension_">Extension.</param>
            <returns>JSON with "true" when it succeeded.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.GrantPermissionsController.UpdateRoleAndItsPermissions(SoftinuxBase.Security.ViewModels.Permissions.UpdateRoleAndGrantsViewModel)">
            <summary>
            Update role name and linked extensions with permission level.
            </summary>
            <param name="model_"></param>
            <returns>Status code 201, or 400 with an error message.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.GrantPermissionsController.DeleteRoleExtensionLink(System.String,System.String)">
            <summary>
            Delete the record linking a role to an extension.
            </summary>
            <param name="roleName_">string represent role to delete.</param>
            <param name="extensionName_">string represent the extension name linked to role.</param>
            <returns>Status code 204 (ok) or 400 (no deletion occurred).</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.GrantPermissionsController.DeleteRole(System.String)">
            <summary>
            Delete the records linking a role to any extension, then delete role record if possible..
            </summary>
            <param name="roleName_">string represent role name to delete.</param>
            <returns>Status code 204, or 400 with an error message.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.ListUsersController.#ctor(ExtCore.Data.Abstractions.IStorage,Microsoft.AspNetCore.Identity.UserManager{SoftinuxBase.Security.Data.Entities.User},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SoftinuxBase.Security.Controllers.ListUsersController"/> class.
            </summary>
            <param name="storage_">application storage instance.</param>
            <param name="users_">.Net Identity user from UserManager.</param>
            <param name="loggerFactory_">application logger instance.</param>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.ListUsersController.Index">
            <summary>
            List users.
            </summary>
            <returns>return listing view of users.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Controllers.ListUsersController.EditUser(System.String)">
            <summary>
            edit user.
            </summary>
            <param name="userId_">string represent user Id.</param>
            <returns>return edit user view.</returns>
        </member>
        <member name="P:SoftinuxBase.Security.ExtensionMetadata.CurrentAssembly">
            <summary>
            Gets the current assembly object.
            </summary>
        </member>
        <member name="P:SoftinuxBase.Security.ExtensionMetadata.CurrentAssemblyPath">
            <summary>
            Gets the full path with assembly name.
            </summary>
        </member>
        <member name="P:SoftinuxBase.Security.ExtensionMetadata.Name">
            <summary>
            Gets the name of the extension.
            </summary>
        </member>
        <member name="P:SoftinuxBase.Security.ExtensionMetadata.Url">
            <summary>
            Gets the URL of the extension.
            </summary>
        </member>
        <member name="P:SoftinuxBase.Security.ExtensionMetadata.Version">
            <summary>
            Gets the version of the extension.
            </summary>
        </member>
        <member name="P:SoftinuxBase.Security.ExtensionMetadata.Authors">
            <summary>
            Gets the authors of the extension (separated by commas).
            </summary>
        </member>
        <member name="P:SoftinuxBase.Security.ExtensionMetadata.Description">
            <summary>
            Gets the description of the extension (separated by commas).
            </summary>
        </member>
        <member name="T:SoftinuxBase.Security.Extensions.UserExtensions">
            <summary>
            Extension methods for currently logged user that is a ClaimsPrincipal.
            </summary>
        </member>
        <member name="M:SoftinuxBase.Security.Extensions.UserExtensions.HasClaim(System.Security.Claims.ClaimsPrincipal,System.String,System.String)">
            <summary>
            Generic method to check whether the currently logged user has some claim.
            Useful for Razor views.
            </summary>
            <param name="claimsPrincipal_"></param>
            <param name="claimType_"></param>
            <param name="claimValue_"></param>
            <returns></returns>
        </member>
        <member name="M:SoftinuxBase.Security.Extensions.UserExtensions.HasPermissionClaim(System.Security.Claims.ClaimsPrincipal,SoftinuxBase.Security.Common.Enums.Permission,System.String)">
            <summary>
            Method to check whether the currently logged user hasc some claim of type Permission,
            defined by a permission (enum value) and a scope (assembly simple name).
            Useful for Razor views.
            </summary>
            <param name="claimsPrincipal_"></param>
            <param name="permission_"></param>
            <param name="extensionAssemblySimpleName_"></param>
            <returns></returns>
        </member>
        <member name="T:SoftinuxBase.Security.ServiceConfiguration.ActivateAuthentication">
            <summary>
            Activates the authentication.
            </summary>
        </member>
        <member name="T:SoftinuxBase.Security.ServiceConfiguration.ConfigureAction">
            <summary>
            Action that must be executed inside the Configure method of a web application's Startup class:
            Activates the authentication.
            </summary>
        </member>
        <member name="T:SoftinuxBase.Security.ServiceConfiguration.ConfigureAuthentication">
            <summary>
            Configuration of application services to activate authenticated access.
            </summary>
        </member>
        <member name="T:SoftinuxBase.Security.ServiceConfiguration.ConfigureServicesAction">
            <summary>
            Action that must be executed inside the ConfigureServices method of a web application's Startup class:
            Configuration of application services for Identity.
            </summary>
        </member>
        <member name="M:SoftinuxBase.Security.Tools.CreateRoleAndGrants.CheckAndSaveNewRoleAndGrants(ExtCore.Data.Abstractions.IStorage,Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole{System.String}},SoftinuxBase.Security.ViewModels.Permissions.SaveNewRoleAndGrantsViewModel)">
            <summary>
            First, check that a role with this name doesn't already exist.
            Second, save new data into database.
            </summary>
            <param name="storage_">the data storage instance.</param>
            <param name="roleManager_">asp identity role manager object.</param>
            <param name="model_">model with role name and grand data (extensions and permissions level).</param>
            <returns>Not null when something failed, else null when save went ok.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Tools.DeleteRole.DeleteRoleExtensionLink(ExtCore.Data.Abstractions.IStorage,Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole{System.String}},System.String,System.String)">
            <summary>
            Delete the record indicating that a role is linked to an extension.
            </summary>
            <param name="storage_">the data storage instance.</param>
            <param name="roleManager_">role manager instance.</param>
            <param name="extensionName_">string represent extension name.</param>
            <param name="roleName_">string represent role name.</param>
            <returns>false when record to delete wasn't found.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Tools.DeleteRole.DeleteRoleExtensionLinks(ExtCore.Data.Abstractions.IStorage,Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole{System.String}},System.String)">
            <summary>
            Delete all the records indicating that a role is linked to extensions.
            </summary>
            <param name="storage_">the data storage instance.</param>
            <param name="roleManager_">role manager instance.</param>
            <param name="roleName_">string represent role name.</param>
            <returns>false when records to delete weren't found.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Tools.ReadGrants.ReadAll(Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole{System.String}},ExtCore.Data.Abstractions.IStorage,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Read all grants: to have a global view of permissions granting: for a role or a user, what kind of permission is granted, for every scope (extension).
            </summary>
            <param name="roleManager_">role manager instance.</param>
            <param name="storage_">the data storage instance.</param>
            <param name="roleNameByRoleId_">dictionary of all role with id.</param>
            <returns>return a GrantViewModel model object.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Tools.ReadGrants.GetExtensions(System.String,ExtCore.Data.Abstractions.IStorage,System.Collections.Generic.IList{System.String}@,System.Collections.Generic.IList{SoftinuxBase.Security.ViewModels.Permissions.SelectedExtension}@)">
            <summary>
            Get the list of extensions associated to a role, with corresponding permission, and also the list of extensions not linked to the role.
            </summary>
            <param name="roleId_">Id of a role.</param>
            <param name="storage_">the data storage instance.</param>
            <param name="availableExtensions_">output a list of available extensions.</param>
            <param name="selectedExtensions_">output a list of selected extensions.</param>
        </member>
        <member name="M:SoftinuxBase.Security.Tools.ReadGrants.IsLastAdmin(Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole{System.String}},ExtCore.Data.Abstractions.IStorage,System.String,System.String)">
            <summary>
            This function checks that the role is the last grant of Admin right to the target extension.
            This allows to warn the user in case no user is granted Admin for this extension and we want to remove the grant from role.
            In case the extension is SoftinuxBase.Security, this check will be used to prevent the delete action.
            </summary>
            <param name="storage_"></param>
            <param name="roleName_"></param>
            <param name="roleManager_"></param>
            <returns></returns>
        </member>
        <member name="M:SoftinuxBase.Security.Tools.RegisterUser.IsUserExist(ExtCore.Data.Abstractions.IStorage,System.String,Microsoft.AspNetCore.Identity.UserManager{SoftinuxBase.Security.Data.Entities.User})">
            <summary>
            Check if user exists by this name or e-mail.
            </summary>
            <param name="storage_">the data storage instance.</param>
            <param name="value_">the user name or email.</param>
            <param name="userManager_">the users manager instance.</param>
            <returns>true if exist, false if not exist.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Tools.RegisterUser.CreateNewUser(ExtCore.Data.Abstractions.IStorage,SoftinuxBase.Security.ViewModels.Account.SignUpViewModel,Microsoft.AspNetCore.Identity.UserManager{SoftinuxBase.Security.Data.Entities.User})">
            <summary>
            Create user into application.
            </summary>
            <param name="storage_">the data storage instance.</param>
            <param name="viewModel_">user object from view.</param>
            <param name="userManager_">the users manager instance.</param>
            <returns>true if create, false if fail.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Tools.UpdateRoleAndGrants.CheckThatRoleOfThisNameExists(Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole{System.String}},System.String,System.String)">
            <summary>
            Check that a role with the same normalized name exists.
            </summary>
            <param name="roleManager_">asp identity role manager object.</param>
            <param name="roleName_">Role name.</param>
            <param name="roleId_">Role ID. When not null, the found role should not have this id.</param>
            <returns>true when a role with this normalized name is found.</returns>
        </member>
        <member name="M:SoftinuxBase.Security.Tools.UpdateRoleAndGrants.CheckAndUpdateRoleAndGrants(ExtCore.Data.Abstractions.IStorage,Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole{System.String}},SoftinuxBase.Security.ViewModels.Permissions.UpdateRoleAndGrantsViewModel)">
            <summary>
            First, check that a role with this name and another ID doesn't already exist.
            Second, save new data into database.
            </summary>
            <param name="storage_">the data storage instance.</param>
            <param name="roleManager_">asp identity role manager object.</param>
            <param name="model_">Model with role name and grant data (extensions and permission level).</param>
            <returns>Not null when something failed, else null when save went ok.</returns>
        </member>
        <member name="P:SoftinuxBase.Security.ViewModels.Account.SignInViewModel.Id">
            <summary>
            Gets or sets the user id, if any match.
            </summary>
        </member>
        <member name="P:SoftinuxBase.Security.ViewModels.Account.SignInViewModel.Username">
            <summary>
            Gets or sets user name or e-mail field.
            </summary>
        </member>
        <member name="P:SoftinuxBase.Security.ViewModels.Account.SignInViewModel.Password">
            <summary>
            Gets or sets password field.
            </summary>
        </member>
        <member name="P:SoftinuxBase.Security.ViewModels.Account.SignInViewModel.RememberMe">
            <summary>
            Gets or sets a value indicating whether use persistent cookie if desired.
            </summary>
        </member>
        <member name="P:SoftinuxBase.Security.ViewModels.Account.SignUpViewModel.UserName">
            <summary>
            Gets or sets first name field.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SoftinuxBase.Security.ViewModels.Account.SignUpViewModel.Email">
            <summary>
            Gets or sets e-mail field.
            </summary>
        </member>
        <member name="P:SoftinuxBase.Security.ViewModels.Account.SignUpViewModel.Password">
            <summary>
            Gets or sets password field.
            </summary>
        </member>
        <member name="P:SoftinuxBase.Security.ViewModels.Permissions.ExtensionPermissionValue.PermissionValue">
            <summary>
            Gets or sets value of the Permission enum.
            </summary>
        </member>
        <member name="T:SoftinuxBase.Security.ViewModels.Permissions.GrantViewModel">
            <summary>
            The view model is used to have a global view of permissions granting: for a role or a user, what kind of permission is granted, for every extension.
            </summary>
        </member>
        <member name="P:SoftinuxBase.Security.ViewModels.Permissions.GrantViewModel.PermissionsByRoleAndExtension">
            <summary>
            Gets or sets for every extension, for every role (role name), the attributed permissions.
            Data is sorted by extension name and role name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SoftinuxBase.Security.ViewModels.Permissions.GrantViewModel.PermissionsByUserAndExtension">
            <summary>
            Gets or sets for every extension, for every user, the attributed permissions.
            Data is sorted by extension name and user name.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SoftinuxBase.Security.ViewModels.Permissions.ReadRoleViewModel">
            <summary>
            All the data related to a role, to display for edition of this role.
            </summary>
        </member>
        <member name="M:SoftinuxBase.Security.ViewModels.Permissions.RoleObject.#ctor(Microsoft.AspNetCore.Identity.IdentityRole{System.String},System.Collections.Generic.List{SoftinuxBase.Security.Data.Entities.User},System.Collections.Generic.List{System.String},System.Collections.Generic.List{SoftinuxBase.Security.Common.Enums.Permission})">
             <summary>
            
             </summary>
             <param name="role_">Required parameter.</param>
             <param name="users_">Optional parameter.</param>
             <param name="extensions_">Extensions list, optional parameter.</param>
             <param name="permissions_">Permissions list optional parameter.</param>
        </member>
        <member name="T:SoftinuxBase.Security.ViewModels.Permissions.SaveNewRoleAndGrantsViewModel">
            <summary>
            The posted data when adding a new role:
            - role name
            - extensions to associate to role
            - permission level.
            </summary>
        </member>
        <member name="T:SoftinuxBase.Security.ViewModels.Permissions.SelectedExtension">
            <summary>
            An extension name and the associated permission level. For example for a link to a role.
            </summary>
        </member>
        <member name="T:SoftinuxBase.Security.ViewModels.Permissions.UpdateRoleAndGrantsViewModel">
            <summary>
            The posted data when modifying a role:
            - role new name
            - extensions/permission level to associate to role.
            </summary>
        </member>
        <member name="P:SoftinuxBase.Security.ViewModels.Permissions.UpdateRoleAndGrantsViewModel.Grants">
            <summary>
            Gets or sets list of extension name with associated permission enum value.
            </summary>
            <value></value>
        </member>
    </members>
</doc>
